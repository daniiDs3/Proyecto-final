import tkinter as tk
from tkinter import messagebox
import os

# Lista global de estudiantes
pazmiño_estudiantes = []

# Función para guardar los datos en un archivo de texto
def daniel_guardar_datos_txt():
    global pazmiño_estudiantes
    with open('estudiantes.txt', 'w') as file:  # Abre el archivo en modo escritura
        for pazmiño_estudiante in pazmiño_estudiantes:  # Itera sobre cada estudiante en la lista
            pazmiño_materias_str = ';'.join(pazmiño_estudiante['materias'])  # Une los cursos con ';'
            morales_becado_str = 'si' if pazmiño_estudiante['becado'] else 'no'  # Convierte el estado de becado a 'si' o 'no'
            file.write(f"{pazmiño_estudiante['nombre']},{pazmiño_estudiante['identificacion']},{pazmiño_estudiante['edad']},{pazmiño_estudiante['grado']},{pazmiño_materias_str},{morales_becado_str},{pazmiño_estudiante.get('faltas', 0)}\n")  # Escribe los datos del estudiante en una línea del archivo
    messagebox.showinfo("Éxito", "Datos guardados correctamente en el archivo estudiantes.txt.")

# Función para cargar datos desde un archivo
def pazmiño_cargar_datos():
    global pazmiño_estudiantes  # Usa la lista global
    pazmiño_estudiantes = []  # Lista local para almacenar los estudiantes cargados desde el archivo
    if os.path.exists('estudiantes.txt'):  # Verifica si el archivo existe
        with open('estudiantes.txt', 'r') as file:
            for line in file:  # Itera sobre cada línea del archivo
                daniel_parts = line.strip().split(',')  # Divide la línea en partes usando la coma como separador
                if len(daniel_parts) >= 6:
                    nombre, identificacion, edad, grado, materias, becado = daniel_parts[:6]  # Extrae datos básicos
                    morales_faltas = int(daniel_parts[6]) if len(daniel_parts) > 6 else 0  # Extrae las faltas si están disponibles
                    pazmiño_estudiantes.append({  # Agrega un diccionario de estudiante a la lista
                        'nombre': nombre,
                        'identificacion': identificacion,
                        'edad': int(edad),
                        'grado': grado,
                        'materias': materias.split(';'),
                        'becado': becado.lower() == 'si',
                        'faltas': morales_faltas
                    })
    return pazmiño_estudiantes  # Retorna la lista de estudiantes cargados desde el archivo

# Función para guardar o actualizar datos en un archivo
def daniel_guardar_datos(estudiantes):
    with open('estudiantes.txt', 'w') as file:  # Abre el archivo en modo escritura
        for estudiante in estudiantes:  # Itera sobre cada estudiante en la lista
            daniel_materias_str = ';'.join(estudiante['materias'])  # Une los cursos con ';'
            daniel_becado_str = 'si' if estudiante['becado'] else 'no'  # Convierte el estado de becado a 's' o 'n'
            file.write(f"{estudiante['nombre']},{estudiante['identificacion']},{estudiante['edad']},{estudiante['grado']},{daniel_materias_str},{daniel_becado_str},{estudiante.get('faltas', 0)}\n")  # Escribe los datos del estudiante en una línea del archivo

# Función para agregar estudiantes
def daniel_agregar_estudiante_gui():
    daniel_ventana_agregar = tk.Toplevel()
    daniel_ventana_agregar.title("Agregar Estudiante")

    tk.Label(daniel_ventana_agregar, text="Nombre y Apellido:").grid(row=0, column=0, padx=10, pady=5)  # Etiqueta para nombre
    daniel_nombre_entry = tk.Entry(daniel_ventana_agregar)  # Campo de entrada para nombre
    daniel_nombre_entry.grid(row=0, column=1, padx=10, pady=5)  # Posiciona el campo de entrada

    tk.Label(daniel_ventana_agregar, text="ID:").grid(row=1, column=0, padx=10, pady=5)  # Etiqueta para ID
    daniel_id_entry = tk.Entry(daniel_ventana_agregar)  # Campo de entrada para ID
    daniel_id_entry.grid(row=1, column=1, padx=10, pady=5)  # Posiciona el campo de entrada

    tk.Label(daniel_ventana_agregar, text="Edad:").grid(row=2, column=0, padx=10, pady=5)  # Etiqueta para edad
    daniel_edad_entry = tk.Entry(daniel_ventana_agregar)  # Campo de entrada para edad
    daniel_edad_entry.grid(row=2, column=1, padx=10, pady=5)  # Posiciona el campo de entrada

    tk.Label(daniel_ventana_agregar, text="Grado:").grid(row=3, column=0, padx=10, pady=5)  # Etiqueta para grado
    daniel_grado_entry = tk.Entry(daniel_ventana_agregar)  # Campo de entrada para grado
    daniel_grado_entry.grid(row=3, column=1, padx=10, pady=5)  # Posiciona el campo de entrada

    tk.Label(daniel_ventana_agregar, text="Materias (separadas por ';'):").grid(row=4, column=0, padx=10, pady=5)  # Etiqueta para cursos
    daniel_materias_entry = tk.Entry(daniel_ventana_agregar)  # Campo de entrada para materias
    daniel_materias_entry.grid(row=4, column=1, padx=10, pady=5)  # Posiciona el campo de entrada

    tk.Label(daniel_ventana_agregar, text="¿Es becado? (si/no):").grid(row=5, column=0, padx=10, pady=5)  # Etiqueta para estado de becado
    daniel_becado_entry = tk.Entry(daniel_ventana_agregar)  # Campo de entrada para estado de becado
    daniel_becado_entry.grid(row=5, column=1, padx=10, pady=5)  # Posiciona el campo de entrada

    def daniel_agregar_estudiante():
        diego_nombre = daniel_nombre_entry.get().strip()  # Obtiene el nombre del campo de entrada
        diego_identificacion = daniel_id_entry.get().strip()  # Obtiene el ID del campo de entrada
        diego_edad = daniel_edad_entry.get().strip()  # Obtiene la edad del campo de entrada
        diego_grado = daniel_grado_entry.get().strip()  # Obtiene el grado del campo de entrada
        diego_materias = daniel_materias_entry.get().strip()  # Obtiene los cursos del campo de entrada
        diego_becado = daniel_becado_entry.get().strip().lower() == 'si'  # Convierte el estado de becado a booleano

        if not diego_nombre or not diego_identificacion or not diego_edad or not diego_grado or not diego_materias:  # Valida que todos los campos estén completos
            messagebox.showerror("Error", "Por favor complete todos los campos.")  # Muestra un mensaje de error
            return

        try:
            daniel_edad = int(daniel_edad)  # Intenta convertir la edad a entero
        except ValueError:
            messagebox.showerror("Error", "La edad debe ser un número entero.")  # Muestra un mensaje de error si la conversión falla
            return

        daniel_nuevos_materias = diego_materias.split(';')  # Divide los cursos por ';'

        daniel_estudiante = {
            'nombre': diego_nombre,
            'identificacion': diego_identificacion,
            'edad': diego_edad,
            'grado': diego_grado,
            'materias': daniel_nuevos_materias,
            'becado': diego_becado,
            'faltas': 0  # Inicialmente sin faltas
        }

        pazmiño_estudiantes.append(daniel_estudiante)  # Agrega el estudiante a la lista global
        messagebox.showinfo("Éxito", "Estudiante agregado correctamente.")  # Muestra un mensaje de éxito

        daniel_guardar_datos(pazmiño_estudiantes)  # Guarda los datos actualizados en el archivo

        daniel_ventana_agregar.destroy()  # Cierra la ventana de agregar estudiante

    tk.Button(daniel_ventana_agregar, text="Agregar Estudiante", command=daniel_agregar_estudiante).grid(row=6, column=0, columnspan=2, pady=10)  # Botón para agregar estudiante

# Función para imprimir los datos de un estudiante
def diego_imprimir_datos_estudiante(estudiante):
    diego_mensaje = (
        f"Nombre: {estudiante['nombre']}\n"  # # Muestra el nombre del estudiante
        f"ID: {estudiante['identificacion']}\n"  # # Muestra el ID del estudiante
        f"Edad: {estudiante['edad']}\n"  # # Muestra la edad del estudiante
        f"Grado: {estudiante['grado']}\n"  # # Muestra el grado del estudiante
        f"Cursos: {', '.join(estudiante['materias'])}\n"  # # Muestra los materias del estudiante separados por ','
        f"Becado: {'Sí' if estudiante['becado'] else 'No'}\n"  # # Muestra si el estudiante está becado o no
        f"Faltas: {estudiante['faltas']}\n"  # # Muestra las faltas del estudiante
    )
    return diego_mensaje  # # Retorna el mensaje formateado

# Función para ver lista de estudiantes
def diego_ver_lista_estudiantes_gui():
    diego_ventana_lista = tk.Toplevel()
    diego_ventana_lista.title("Lista de Estudiantes")

    # Función para añadir una falta al estudiante
    def diego_añadir_falta(indice):
        pazmiño_estudiantes[indice]['faltas'] += 1
        if pazmiño_estudiantes[indice]['faltas'] > 3:
            pazmiño_estudiantes[indice]['becado'] = False
            messagebox.showinfo("Aviso", f"El estudiante {pazmiño_estudiantes[indice]['nombre']} ha perdido su beca por acumulación de faltas.")
        daniel_guardar_datos(pazmiño_estudiantes)  # Guarda los datos actualizados en el archivo
        messagebox.showinfo("Éxito", f"Se añadió una falta al estudiante {pazmiño_estudiantes[indice]['nombre']}.")

    for i, estudiante in enumerate(pazmiño_estudiantes):
        info_estudiante = f"Nombre: {estudiante['nombre']}\nID: {estudiante['identificacion']}\nEdad: {estudiante['edad']}\nGrado: {estudiante['grado']}\nMaterias: {', '.join(estudiante['materias'])}\nBecado: {'Sí' if estudiante['becado'] else 'No'}\nFaltas: {estudiante.get('faltas', 0)}"

        tk.Label(diego_ventana_lista, text=info_estudiante, justify=tk.LEFT).grid(row=i, column=0, padx=10, pady=5)

        tk.Button(diego_ventana_lista, text="Añadir falta", command=lambda idx=i: diego_añadir_falta(idx)).grid(row=i, column=1, padx=10, pady=5)

    # Botón para cerrar la ventana
    tk.Button(diego_ventana_lista, text="Cerrar", command=diego_ventana_lista.destroy).grid(row=len(pazmiño_estudiantes), column=0, columnspan=2, pady=10)

# Función para buscar estudiantes
def diego_buscar_estudiantes_gui():
    diego_ventana_buscar = tk.Toplevel()
    diego_ventana_buscar.title("Buscar Estudiantes")

    diego_opciones_busqueda = [
        "Nombre",
        "ID",
        "Grado",
        "Materia"
    ]

    diego_variable_busqueda = tk.StringVar(diego_ventana_buscar)
    diego_variable_busqueda.set(diego_opciones_busqueda[0])

    tk.Label(diego_ventana_buscar, text="Buscar por:").grid(row=0, column=0, padx=10, pady=5)
    diego_buscar_por_menu = tk.OptionMenu(diego_ventana_buscar, diego_variable_busqueda, *diego_opciones_busqueda)
    diego_buscar_por_menu.grid(row=0, column=1, padx=10, pady=5)

    tk.Label(diego_ventana_buscar, text="Valor a buscar:").grid(row=1, column=0, padx=10, pady=5)
    diego_valor_busqueda_entry = tk.Entry(diego_ventana_buscar)
    diego_valor_busqueda_entry.grid(row=1, column=1, padx=10, pady=5)

    resultados_frame = tk.LabelFrame(diego_ventana_buscar, text="Resultados")
    resultados_frame.grid(row=2, column=0, columnspan=2, padx=10, pady=5, sticky="nsew")

    def diego_buscar():
        diego_busqueda_por = diego_variable_busqueda.get()
        diego_valor_busqueda = diego_valor_busqueda_entry.get().strip()

        if not diego_valor_busqueda:
            messagebox.showerror("Error", "Ingrese un valor para buscar.")
            return

        # Limpiar resultados anteriores
        for widget in resultados_frame.winfo_children():
            widget.destroy()

        encontrados = []
        for estudiante in pazmiño_estudiantes:
            if diego_busqueda_por == "Nombre" and diego_valor_busqueda.lower() in estudiante['nombre'].lower():
                encontrados.append(estudiante)
            elif diego_busqueda_por == "ID" and diego_valor_busqueda == estudiante['identificacion']:
                encontrados.append(estudiante)
            elif diego_busqueda_por == "Grado" and diego_valor_busqueda == estudiante['grado']:
                encontrados.append(estudiante)
            elif diego_busqueda_por == "Materias" and diego_valor_busqueda in estudiante['materias']:
                encontrados.append(estudiante)

        if encontrados:
            for i, estudiante in enumerate(encontrados, 1):
                estudiante_frame = tk.LabelFrame(resultados_frame, text=f"Estudiante {i}")
                estudiante_frame.pack(padx=10, pady=5, fill="both", expand=True)
                
                mensaje = diego_imprimir_datos_estudiante(estudiante)
                tk.Label(estudiante_frame, text=mensaje).pack(padx=10, pady=5, anchor="w")
        else:
            tk.Label(resultados_frame, text="No se encontraron resultados.").pack(padx=20, pady=10)

    tk.Button(diego_ventana_buscar, text="Buscar", command=diego_buscar).grid(row=3, column=0, columnspan=2, pady=10)

# Función para actualizar estudiantes
def mateo_actualizar_estudiante_gui():
    mateo_ventana_actualizar = tk.Toplevel()
    mateo_ventana_actualizar.title("Actualizar Estudiante")

    tk.Label(mateo_ventana_actualizar, text="ID del Estudiante:").grid(row=0, column=0, padx=10, pady=5)
    mateo_id_actualizar_entry = tk.Entry(mateo_ventana_actualizar)
    mateo_id_actualizar_entry.grid(row=0, column=1, padx=10, pady=5)

    def ariel_buscar_estudiante():
        mateo_id_estudiante = mateo_id_actualizar_entry.get().strip()

        if not mateo_id_estudiante:
            messagebox.showerror("Error", "Ingrese un ID para buscar.")
            return

        for estudiante in pazmiño_estudiantes:
            if estudiante['identificacion'] == mateo_id_estudiante:
                mateo_ventana_modificar = tk.Toplevel()
                mateo_ventana_modificar.title("Modificar Estudiante")

                tk.Label(mateo_ventana_modificar, text="Nombre y Apellido:").grid(row=0, column=0, padx=10, pady=5)
                nombre_modificar_entry = tk.Entry(mateo_ventana_modificar, width=40)
                nombre_modificar_entry.grid(row=0, column=1, padx=10, pady=5)
                nombre_modificar_entry.insert(0, estudiante['nombre'])

                tk.Label(mateo_ventana_modificar, text="Edad:").grid(row=1, column=0, padx=10, pady=5)
                mateo_edad_modificar_entry = tk.Entry(mateo_ventana_modificar)
                mateo_edad_modificar_entry.grid(row=1, column=1, padx=10, pady=5)
                mateo_edad_modificar_entry.insert(0, estudiante['edad'])

                tk.Label(mateo_ventana_modificar, text="¿Es becado? (si/no):").grid(row=2, column=0, padx=10, pady=5)
                mateo_becado_modificar_entry = tk.Entry(mateo_ventana_modificar)
                mateo_becado_modificar_entry.grid(row=2, column=1, padx=10, pady=5)
                mateo_becado_modificar_entry.insert(0, 'si' if estudiante['becado'] else 'no')

                def mateo_guardar_cambios():
                    estudiante['nombre'] = nombre_modificar_entry.get().strip()
                    estudiante['edad'] = int(mateo_edad_modificar_entry.get().strip())
                    estudiante['becado'] = mateo_becado_modificar_entry.get().strip().lower() == 'si'

                    daniel_guardar_datos(pazmiño_estudiantes)
                    messagebox.showinfo("Éxito", "Estudiante actualizado correctamente.")
                    mateo_ventana_modificar.destroy()
                    mateo_ventana_actualizar.destroy()

                tk.Button(mateo_ventana_modificar, text="Guardar Cambios", command=mateo_guardar_cambios).grid(row=3, column=0, columnspan=2, pady=10)
                break
        else:
            messagebox.showerror("Error", "No se encontró ningún estudiante con ese ID.")

    tk.Button(mateo_ventana_actualizar, text="Buscar Estudiante", command=ariel_buscar_estudiante).grid(row=1, column=0, columnspan=2, pady=10)

# Función para modificar estudiantes
def pazmiño_modificar_estudiante_gui():
    pazmiño_ventana_modificar = tk.Toplevel()
    pazmiño_ventana_modificar.title("Modificar Estudiante")

    tk.Label(pazmiño_ventana_modificar, text="ID del Estudiante:").grid(row=0, column=0, padx=10, pady=5)
    pazmiño_id_modificar_entry = tk.Entry(pazmiño_ventana_modificar)
    pazmiño_id_modificar_entry.grid(row=0, column=1, padx=10, pady=5)

    def pazmiño_buscar_estudiante():
        id_estudiante = pazmiño_id_modificar_entry.get().strip()

        if not id_estudiante:
            messagebox.showerror("Error", "Ingrese un ID para buscar.")
            return

        for estudiante in pazmiño_estudiantes:
            if estudiante['identificacion'] == id_estudiante:
                pazmiño_ventana_modificar = tk.Toplevel()
                pazmiño_ventana_modificar.title("Modificar Estudiante")

                tk.Label(pazmiño_ventana_modificar, text="Nombre y Apellido:").grid(row=0, column=0, padx=10, pady=5)
                nombre_modificar_entry = tk.Entry(pazmiño_ventana_modificar, width=40)
                nombre_modificar_entry.grid(row=0, column=1, padx=10, pady=5)
                nombre_modificar_entry.insert(0, estudiante['nombre'])

                tk.Label(pazmiño_ventana_modificar, text="Edad:").grid(row=1, column=0, padx=10, pady=5)
                edad_modificar_entry = tk.Entry(pazmiño_ventana_modificar)
                edad_modificar_entry.grid(row=1, column=1, padx=10, pady=5)
                edad_modificar_entry.insert(0, estudiante['edad'])

                tk.Label(pazmiño_ventana_modificar, text="Grado:").grid(row=2, column=0, padx=10, pady=5)
                grado_modificar_entry = tk.Entry(pazmiño_ventana_modificar)
                grado_modificar_entry.grid(row=2, column=1, padx=10, pady=5)
                grado_modificar_entry.insert(0, estudiante['grado'])

                tk.Label(pazmiño_ventana_modificar, text="Materias (separadas por ';'):").grid(row=3, column=0, padx=10, pady=5)
                materias_modificar_entry = tk.Entry(pazmiño_ventana_modificar)
                materias_modificar_entry.grid(row=3, column=1, padx=10, pady=5)
                materias_modificar_entry.insert(0, ';'.join(estudiante['materias']))

                tk.Label(pazmiño_ventana_modificar, text="¿Es becado? (si/no):").grid(row=4, column=0, padx=10, pady=5)
                becado_modificar_entry = tk.Entry(pazmiño_ventana_modificar)
                becado_modificar_entry.grid(row=4, column=1, padx=10, pady=5)
                becado_modificar_entry.insert(0, 'si' if estudiante['becado'] else 'no')

                def diegodaniel_guardar_cambios():
                    estudiante['nombre'] = nombre_modificar_entry.get().strip()
                    estudiante['edad'] = int(edad_modificar_entry.get().strip())
                    estudiante['grado'] = grado_modificar_entry.get().strip()
                    estudiante['cursos'] = materias_modificar_entry.get().strip().split(';')
                    estudiante['becado'] = becado_modificar_entry.get().strip().lower() == 's'

                    daniel_guardar_datos(pazmiño_estudiantes)
                    messagebox.showinfo("Éxito", "Estudiante actualizado correctamente.")
                    pazmiño_ventana_modificar.destroy()

                tk.Button(pazmiño_ventana_modificar, text="Guardar Cambios", command=diegodaniel_guardar_cambios).grid(row=5, column=0, columnspan=2, pady=10)
                break
        else:
            messagebox.showerror("Error", "No se encontró ningún estudiante con ese ID.")

    tk.Button(pazmiño_ventana_modificar, text="Buscar Estudiante", command=pazmiño_buscar_estudiante).grid(row=1, column=0, columnspan=2, pady=10)

# Función para eliminar estudiantes
def pazmiño_eliminar_estudiante_gui():
    ventana_eliminar = tk.Toplevel()
    ventana_eliminar.title("Eliminar Estudiante")

    tk.Label(ventana_eliminar, text="ID del Estudiante:").grid(row=0, column=0, padx=10, pady=5)
    id_eliminar_entry = tk.Entry(ventana_eliminar)
    id_eliminar_entry.grid(row=0, column=1, padx=10, pady=5)

    def danielalejandro_eliminar_estudiante():
        id_estudiante = id_eliminar_entry.get().strip()

        if not id_estudiante:
            messagebox.showerror("Error", "Ingrese un ID para buscar.")
            return

        for i, estudiante in enumerate(pazmiño_estudiantes):
            if estudiante['identificacion'] == id_estudiante:
                pazmiño_estudiantes.pop(i)
                daniel_guardar_datos(pazmiño_estudiantes)
                messagebox.showinfo("Éxito", "Estudiante eliminado correctamente.")
                ventana_eliminar.destroy()
                break
        else:
            messagebox.showerror("Error", "No se encontró ningún estudiante con ese ID.")

    tk.Button(ventana_eliminar, text="Eliminar Estudiante", command=danielalejandro_eliminar_estudiante).grid(row=1, column=0, columnspan=2, pady=10)

# Función para cargar datos desde un archivo de texto
def cevallos_cargar_datos_desde_archivo():
    global pazmiño_estudiantes
    pazmiño_estudiantes = []  # Reinicia la lista global de estudiantes

    if os.path.exists('estudiantes.txt'):  # Verifica si el archivo existe
        with open('estudiantes.txt', 'r') as file:
            for line in file:  # Itera sobre cada línea del archivo
                parts = line.strip().split(',')  # Divide la línea en partes usando la coma como separador
                if len(parts) >= 6:
                    nombre, identificacion, edad, grado, materias, becado = parts[:6]  # Extrae datos básicos
                    faltas = int(parts[6]) if len(parts) > 6 else 0  # Extrae las faltas si están disponibles
                    pazmiño_estudiantes.append({  # Agrega un diccionario de estudiante a la lista
                        'nombre': nombre,
                        'identificacion': identificacion,
                        'edad': int(edad),
                        'grado': grado,
                        'materias': materias.split(';'),
                        'becado': becado.lower() == 's',
                        'faltas': faltas
                    })

        messagebox.showinfo("Éxito", "Datos cargados correctamente desde el archivo estudiantes.txt.")
    else:
        messagebox.showerror("Error", "El archivo estudiantes.txt no existe.")

# Función para salir y cerrar el programa con mensaje
def cevallos_salir_con_mensaje():
    ventana_principal.quit()  # Cierra la ventana principal de Tkinter
    messagebox.showinfo("Hasta luego", "Cerrando programa....\nPonganos un 50 profe :(")


# Función principal para mostrar el menú
# Función principal para mostrar el menú
def morales_mostrar_menu_principal():
    global ventana_principal
    ventana_principal = tk.Tk()
    ventana_principal.title("Gestión de Estudiantes")

    tk.Button(ventana_principal, text="Agregar Estudiante", command=daniel_agregar_estudiante_gui).pack(padx=20, pady=10)
    tk.Button(ventana_principal, text="Ver Lista de Estudiantes", command=diego_ver_lista_estudiantes_gui).pack(padx=20, pady=10)
    tk.Button(ventana_principal, text="Buscar Estudiantes", command=diego_buscar_estudiantes_gui).pack(padx=20, pady=10)
    tk.Button(ventana_principal, text="Actualizar Estudiante", command=mateo_actualizar_estudiante_gui).pack(padx=20, pady=10)
    tk.Button(ventana_principal, text="Modificar Estudiante", command=pazmiño_modificar_estudiante_gui).pack(padx=20, pady=10)
    tk.Button(ventana_principal, text="Eliminar Estudiante", command=pazmiño_eliminar_estudiante_gui).pack(padx=20, pady=10)
    
    # Botón para guardar datos en un archivo de texto
    tk.Button(ventana_principal, text="Guardar Datos TXT", command=daniel_guardar_datos_txt).pack(padx=20, pady=10)
    
    # Botón para cargar datos desde un archivo de texto
    tk.Button(ventana_principal, text="Cargar Datos desde Archivo", command=cevallos_cargar_datos_desde_archivo).pack(padx=20, pady=10)
    
    # Botón para salir y cerrar el programa con mensaje
    tk.Button(ventana_principal, text="Salir", command=cevallos_salir_con_mensaje).pack(padx=20, pady=10)

    ventana_principal.mainloop()  # Ejecuta el bucle principal de la ventana

# Cargar los datos al iniciar el programa
pazmiño_estudiantes =pazmiño_cargar_datos()

# Ejecutar la función principal para mostrar el menú
morales_mostrar_menu_principal()
