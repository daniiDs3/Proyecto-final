import os

# Lista global de estudiantes
pazmiño_estudiantes = []

# Función para agregar estudiantes
def agregar_estudiantes():
    pazmino_n = input("Ingrese los nombres y apellidos del estudiante: ")
    pazmino_id = input("Ingrese el numero de identificacion del estudiante: ")
    pazmino_e = input("Ingrese la edad del estudiante: ")
    pazmino_g = input("Ingrese el grado del estudiante: ")
    pazmino_c = input("Ingrese los cursos inscritos del estudiante separados por ';': ")
    mateo1_beca = input("¿El estudiante es becado? (s/n): ").lower()

    mateo2_faltas = 0
    if mateo1_beca == 's':
        mateo2_faltas = int(input("Ingrese el número de faltas del estudiante: "))
        if mateo2_faltas > 3:
            print("El estudiante ha perdido su beca debido a que el límite de faltas es 3.")
            mateo1_beca = 'n'  # Cambiamos el estado de becado a 'no' si pierde la beca

    # Verificar si el estudiante ya está registrado por su identificación
    for estudiante in pazmiño_estudiantes:
        if estudiante["identificacion"] == pazmino_id:
            print("El estudiante ya está registrado.")
            return
    
    # Crear diccionario del estudiante y agregarlo a la lista
    daniel_estudiante = {
        "nombre": pazmino_n,
        "identificacion": pazmino_id,
        "edad": pazmino_e,
        "grado": pazmino_g,
        "cursos": pazmino_c.split(';'),  # Convertir cursos a lista separados por ';'
        "becado": mateo1_beca == 's',
        "faltas": mateo2_faltas
    }
    pazmiño_estudiantes.append(daniel_estudiante)
    print("El estudiante ha sido agregado con éxito.")

    # Guardar los datos actualizados en el archivo
    guardar_datos(pazmiño_estudiantes)

# Función para imprimir los datos de un estudiante
def imprimir_datos_estudiante(estudiante):
    print("¡Estudiante encontrado!:")
    print("Nombre:", estudiante["nombre"])
    print("ID:", estudiante["identificacion"])
    print("Edad:", estudiante["edad"])
    print("Grado:", estudiante["grado"])
    print("Cursos:", ', '.join(estudiante["cursos"]))
    print("Becado:", "Sí" if estudiante["becado"] else "No")
    if estudiante["becado"]:
        print("Faltas:", estudiante["faltas"])
    print("---------------------------------")

# Función para ver la lista de estudiantes
def ver_lista_estudiantes():
    if not pazmiño_estudiantes:
        print("No existen estudiantes registrados en el sistema.")
    else:
        print("Lista de estudiantes registrados:")
        for i, estudiante in enumerate(pazmiño_estudiantes, 1):
            print(f"Estudiante {i}:")
            print("Nombre:", estudiante["nombre"])
            print("ID:", estudiante["identificacion"])
            print("Edad:", estudiante["edad"])
            print("Grado:", estudiante["grado"])
            print("Cursos:", ', '.join(estudiante["cursos"]))
            print("---------------------------------")

# Función para buscar estudiantes
def buscar_estudiantes():
    daniel_buscar_por = input("Ingrese el criterio de búsqueda del estudiante (nombre, ID, grado, curso): ")
    daniel_buscar_valor = input("Ingrese el valor de búsqueda del estudiante: ") 
    daniel_encontrado = False 

    for estudiante in pazmiño_estudiantes:
        if daniel_buscar_por.lower() == "nombre" and estudiante["nombre"].lower() == daniel_buscar_valor.lower():
            imprimir_datos_estudiante(estudiante)
            daniel_encontrado = True
        elif daniel_buscar_por.lower() == "id" and estudiante["identificacion"] == daniel_buscar_valor:
            imprimir_datos_estudiante(estudiante)
            daniel_encontrado = True
        elif daniel_buscar_por.lower() == "grado" and estudiante["grado"].lower() == daniel_buscar_valor.lower():
            imprimir_datos_estudiante(estudiante)
            daniel_encontrado = True
        elif daniel_buscar_por.lower() == "curso" and daniel_buscar_valor.lower() in [curso.lower() for curso in estudiante["cursos"]]:
            imprimir_datos_estudiante(estudiante)
            daniel_encontrado = True

    if not daniel_encontrado:
        print("El estudiante no está registrado en el sistema.")  

# Función para cargar datos desde un archivo
def cargar_datos():
    diego_estudiantes = []
    if os.path.exists('estudiantes.txt'):
        with open('estudiantes.txt', 'r') as file:
            for line in file:
                nombre, identificacion, edad, grado, cursos = line.strip().split(',')
                diego_estudiantes.append({
                    'nombre': nombre,
                    'identificacion': identificacion,
                    'edad': edad,
                    'grado': grado,
                    'cursos': cursos.split(';')  # Separar los cursos por ';'
                })
    return diego_estudiantes

# Función para guardar o actualizar datos en un archivo
def guardar_datos(estudiantes):
    with open('estudiantes.txt', 'w') as file:
        for estudiante in estudiantes:
            diego_cursos_str = ';'.join(estudiante['cursos'])  # Convertir cursos a string separados por ';'
            file.write(f"{estudiante['nombre']},{estudiante['identificacion']},{estudiante['edad']},{estudiante['grado']},{diego_cursos_str}\n")

# Funcion para actualizar datos de los estudiantes
def actualizar_estudiante():
    diego_nombre = input("Ingrese el nombre del estudiante que desea actualizar: ")
    diego_encontrado = False
    for estudiante in pazmiño_estudiantes:
        if estudiante['nombre'] == diego_nombre:
            print(f"Datos actuales del estudiante:\nNombre: {estudiante['nombre']}, Edad: {estudiante['edad']}, Curso: {estudiante['cursos']}")
            diego_edad = int(input("Ingrese la nueva edad: "))
            diego_cursos = input("Ingrese los nuevos cursos separados por ';': ")
            estudiante['edad'] = diego_edad
            estudiante['cursos'] = diego_cursos.split(';')
            print("Los datos del estudiante se han actualizado correctamente.")
            diego_encontrado = True
            break
    if not diego_encontrado:
        print("Estudiante no ha sido encontrado.")

# Función para modificar estudiantes
def modificar_estudiante():
    morales1_id = input("Ingrese el ID del estudiante que desea modificar: ")
    morales1_encontrado = False

    for estudiante in pazmiño_estudiantes:
        if estudiante["identificacion"] == morales1_id:
            morales1_encontrado = True
            print("Estudiante encontrado. Ingrese los nuevos datos (deje en blanco para mantener el valor actual):")
            
            morales2_nombre = input("Nombre actual (" + estudiante['nombre'] + "): ")
            morales3_edad = input("Edad actual (" + estudiante['edad'] + "): ")
            morales4_grado = input("Grado actual (" + estudiante['grado'] + "): ")
            morales5_cursos = input("Cursos actuales (" + ', '.join(estudiante['cursos']) + "): ")
            mateo4_beca = input("Estado de becado actual (" + ("Sí" if estudiante["becado"] else "No") + "). ¿Desea cambiar? (s/n): ").lower()
            
            if morales2_nombre:
                estudiante["nombre"] = morales2_nombre
            if morales3_edad:
                estudiante["edad"] = morales3_edad
            if morales4_grado:
                estudiante["grado"] = morales4_grado
            if morales5_cursos:
                estudiante["cursos"] = morales5_cursos.split(';')
            if mateo4_beca == 's':
                estudiante["becado"] = True
                mateo5_faltas = int(input("Ingrese el número de faltas del estudiante: "))
                estudiante["faltas"] = mateo5_faltas
                if mateo5_faltas > 3:
                    print("El estudiante ha perdido su beca debido a que el límite de faltas es 3.")
                    estudiante["becado"] = False
            elif mateo4_beca == 'n':
                estudiante["becado"] = False
                estudiante["faltas"] = 0
            
            print("El estudiante ha sido actualizado con éxito.")
            break

    if not morales1_encontrado:
        print("El estudiante no está registrado en el sistema.")

# Función para eliminar estudiantes
def eliminar_estudiante():
    morales1_id = input("Ingrese el ID del estudiante que desea eliminar: ")
    morales1_encontrado = False

    for estudiante in pazmiño_estudiantes:
        if estudiante["identificacion"] == morales1_id:
            pazmiño_estudiantes.remove(estudiante)
            morales1_encontrado = True
            print("El estudiante con ID " + morales1_id + " ha sido eliminado.")
            break

    if not morales1_encontrado:
        print("El estudiante no está registrado en el sistema.")

# Función para salir del sistema
def salir():
    morales1_confirmacion = input("¿Está seguro que desea salir? (s/n): ").lower()
    if morales1_confirmacion == 's':
        print("Gracias por usar el sistema de gestión de estudiantes. ¡Hasta luego!")
    else:
        print("Regresando al menú principal...")

# Menú principal
def menu_principal():
    while True:
        print("\nMenú Principal:")
        print("1. Agregar Estudiante")
        print("2. Buscar Estudiante")
        print("3. Ver Lista de Estudiantes")
        print("4. Actualizar Estudiante")
        print("5. Guardar/Actualizar Archivo de Datos")
        print("6. Cargar Datos desde Archivo")
        print("7. Modificar Estudiante")
        print("8. Eliminar Estudiante")
        print("9. Salir")

        daniel_opcion = input("Seleccione una opción (1-9): ")

        if daniel_opcion == "1":
            agregar_estudiantes()
        elif daniel_opcion == "2":
            buscar_estudiantes()
        elif daniel_opcion == "3":
            ver_lista_estudiantes()
        elif daniel_opcion == "4":
            actualizar_estudiante()
        elif daniel_opcion == "5":
            guardar_datos()
        elif daniel_opcion == "6":
            cargar_datos()
        elif daniel_opcion == "7":
            modificar_estudiante()
        elif daniel_opcion == "8":
            eliminar_estudiante()
        elif daniel_opcion == "9":
            salir()
            break
        else:
            print("Opción no válida. Por favor, seleccione una opción del 1 al 9.")

# Iniciar el programa llamando al menú principal
menu_principal()
